model: lessons
---
title: Lessons (from Cohort 2 - will be update for Cohort 3)
---
roadmappingTitle:
Roadmapping
---
roadmapping:

- Read over this roadmapping tutorial from Mozilla Open Leaders & check out some of the examples. We won’t be following this exactly, but it is a good overview. [https://mozilla.github.io/open-leadership-training-series/articles/opening-your-project/start-your-project-roadmap/](https://mozilla.github.io/open-leadership-training-series/articles/opening-your-project/start-your-project-roadmap/)
- The [syllabus](http://fellows.frictionlessdata.io/syllabus/) can be thought of as the roadmap for the programme, but the point of this exercise is for each of you to map these goals to your own timeline.
- Take the syllabus, and map out the main goals, or “milestones”.  These include things like blogs, learning goals, and workshops. (This can be taken pretty much straight from the syllabus)
- Keep in mind dates and events for the upcoming 9 months. Will you need to change the dates for a specific milestone due to your schedule (work event, school exam, vacation)?
- Think about your personal goals for this fellowship. What are your short term, medium term, and long term goals? Are there milestones that reflect these goals?
- Are there additional milestones you want to add to your roadmap? For example, writing additional blogs, giving additional workshops? These can also be added later.
- Using project management tools: I recommend using project management tools like [Trello](https://trello.com), [GitHub projects](https://github.com/features/project-management/), or simply a  pen + paper planner to write down your main milestone tasks to help you keep track of your progress. If you want to use Trello or GitHub projects and need help, Lilly can help you.
***
---
journalclubTitle:
Journal Club Lesson
---
journalclub:
- We’ll be reading “Do you speak open science? Resources and tips to learn the language” by Paola Masuzzo​ and Lennart Martens [https://peerj.com/preprints/2689/](https://peerj.com/preprints/2689/)
- You will then answer the following discussion questions in Slack (I will asign each of you to answer 2 of these questions):
- **Discussion questions:**
  1. The authors identify four "pillars" of open science: data, code, papers, and review. Do you agree with these? Are there aspects of open science that you think are missing?
  2. When sharing raw data, what other information should also be released?
  3. What are some ways that researchers can openly release their data?
  4. Why is it useful to share the code used in an experiment?
  5. What are some ways to openly share code or software?
  6. What are preprints and how are they different from traditional publications?
  7. What are some reasons why researchers might not publish in open access journals? What are your thoughts on those reasons?
  8. What are some models of open peer review?
  9. What are some benefits and risks of open peer review?
***
---
githubTitle:
GitHub Instructions - Using GitHub to post your blog
---
github:
- GitHub instructions for the command line/terminal (Lilly can help you with this):
  - The repository is here [https://github.com/frictionlessdata/fellows](https://github.com/frictionlessdata/fellows)
  - The blog content can be found within the following folder: fellows -> content -> blog -> oa-week -> contents.lr
  - Step 1, Pull down the master branch so you have the most recent version of the website code on your local machine. Do this before you make your edits. Type 'git pull origin master'
  - Step 2, Create a new branch: in the terminal, write 'git checkout -b your-branch-name' (replace with your branch's name, which can be anything)
  - *make sure you don't edit the master branch* You can check with 'git status'
  - Step 3, Add your blog text to the 'contents.lr' file within the correct blog folder. Each blog has it's own folder. Add your text as Markdown, and remember to keep the `title` and `body` keywords.
  - Step 4, Add and commit your changes: Once you finish editing the file, in your terminal, type: 
    - git status
      - make sure everything looks OK
    - git add content/blog/blog-folder-name/contents.lr
    - git commit -m "adds your-name's blog"
  - Step 5, Push your changes to your branch and open a Pull Request
    - git push origin your-branch-name
    - in GitHub, open a pull request (PR) + tag @lwinfree for review
    - Lilly will merge your PR
  - **ask Lilly or each other if you need help!**

### *[Additional helpful resources here](/resources#coding)*
***
---
specsTitle:
Using Specs and Schemas
---
specs:
- Read through this introduction to [JSON schemas](https://json-schema.org/understanding-json-schema/about.html#about) by json-schema.org
- Read through the [Frictionless Data Specs](https://frictionlessdata.io/specs/)
- Focus on the [DataPackage specs](https://frictionlessdata.io/specs/data-package/) & the [csv dialect](https://frictionlessdata.io/specs/csv-dialect/)
***
---
openSciTitle:
Open Science Lesson
---
openSci:
### Go over these resources:
- In the [Turing Way Guide for Reproducible Research](https://the-turing-way.netlify.app/reproducible-research/reproducible-research.html), read these sections:
  - Overview, Open Research, Research Data Management, Reproducible Environments
- Read through the [Data Management Plan Tool guidance](https://dmptool.org/general_guidance)
- Read this eLife Lab article about the [Reproducible Document Stack](https://elifesciences.org/labs/b521cf4d/reproducible-document-stack-towards-a-scalable-solution-for-reproducible-articles)
- Read this eLife Lab article about their [Execuatable Research Articles](https://elifesciences.org/labs/dc5acbde/welcome-to-a-new-era-of-reproducible-publishing)
- Watch this video about [Global Inclusivity in Open Science](https://zenodo.org/record/3906784#.X2PMfJNKgWq) from the Organization of Human Brain Mapping (OHBM). Note: you will need to download this to watch it.
- By the end of Week 2, find another resource on reproducible research, open science, or data management and add it to the Fellows Resources site by opening a Pull Request on GitHub [https://github.com/frictionlessdata/fellows/blob/master/content/resources/contents.lr](https://github.com/frictionlessdata/fellows/blob/master/content/resources/contents.lr)
- *Optional* Create an [ORCID](https://orcid.org/) if you don't have one
- *Optional* Extra resources (if you are interested in more material):
  - [Data Management Best Practices](/resources#dataManagement)
  - [Reproducible Research & Open Science Readings](/resources#reproducible)
***
---
datapackagesTitle:
Data Packages Lesson
---
datapackages:
### Data Packages - using [Data Package Creator](http://create.frictionlessdata.io/)
- Work through this tutorial on well-packaged datasets [https://frictionlessdata.io/field-guide/well-packaged-datasets/](https://frictionlessdata.io/field-guide/well-packaged-datasets/)
- Watch this video on packaging data [https://www.youtube.com/watch?v=VrdPj28-L9g](https://www.youtube.com/watch?v=VrdPj28-L9g)
- ** In Slack, answer these questions:**
  1. What makes up a data package?
  2. What kind of metadata would you include for the data you work with?

### *OPTIONAL* - Data Packages - using our Python [datapackage.py library](https://github.com/frictionlessdata/datapackage-py)
- Use these instructions to import datapackage.py and create a new datapackage [http://frictionlessdata.io/docs/creating-tabular-data-packages-in-python/](http://frictionlessdata.io/docs/creating-tabular-data-packages-in-python/)
- Follow these instructions to work with an existing Data Package in Python - note: stop at the 'Loading into an SQL database' step. [http://frictionlessdata.io/docs/using-data-packages-in-python/](http://frictionlessdata.io/docs/using-data-packages-in-python/)
- Play around with this [Jupyter notebook](https://github.com/frictionlessdata/fellows/blob/master/docs/datapackage-py-notebook.ipynb)

### *OPTIONAL* - Data Packages - using our R [datapackage.r library](https://github.com/frictionlessdata/datapackage-r)
- Use these instructions to install datapackage.r and create a new datapackage [http://frictionlessdata.io/docs/creating-tabular-data-packages-in-r/](http://frictionlessdata.io/docs/creating-tabular-data-packages-in-r/)
- Follow these instructions to work with an existing Data Package in R - note: stop at the 'Loading into an SQL database' step. [http://frictionlessdata.io/docs/using-data-packages-in-r/](http://frictionlessdata.io/docs/using-data-packages-in-r/)

### *[Additional helpful resources here](/resources#fdTutorials)*
***
---
goodtablesTitle:
Goodtables Data Validation Lesson
---
goodtables:
### Validate your data with the Goodtables browser tool and with the command line interface
- Next, learn about how to validate data with Goodtables by going through the following tutorial and video (I recommend starting by first reading the tutorial, then watching the video, then actually trying to do the tutorial):
  - Follow the first half of this tutorial to learn (1) how to validate data with the goodtables browser tool, and then continue on to the second half to learn (2) how to use the goodtables command line interface [https://frictionlessdata.io/blog/2018/07/16/validated-tabular-data/](https://frictionlessdata.io/blog/2018/07/16/validated-tabular-data/)
  - Follow along with this video on validating on the command line with goodtables: [https://www.youtube.com/watch?v=PqtM6d696eY&list=LLQe-pXn0XZzmRzvyOMZpfEg](https://www.youtube.com/watch?v=PqtM6d696eY&list=LLQe-pXn0XZzmRzvyOMZpfEg) **Note**: this video has some Python installation tips, so if you are stuck on the Python part, watch the video (and ask in Slack if you are stuck!).
- Once you are comfortable with the idea of validating your data with Goodtables, learn about *continuous* validation by:
  - Reading through this guide on how to *continuously* validate your data with goodtables [https://frictionlessdata.io/blog/2018/03/12/automatically-validated-tabular-data/](https://frictionlessdata.io/blog/2018/03/12/automatically-validated-tabular-data/)
  - Watching this video to see *continuous* validation in action: [https://www.youtube.com/watch?v=9YHwu34D_vM&list=LLQe-pXn0XZzmRzvyOMZpfEg](https://www.youtube.com/watch?v=9YHwu34D_vM&list=LLQe-pXn0XZzmRzvyOMZpfEg)
- For an recap, read through this documentation about goodtables [https://github.com/frictionlessdata/frictionless-py/tree/goodtables](https://github.com/frictionlessdata/frictionless-py/tree/goodtables)

### *[Additional helpful resources here](/resources#fdTutorials)*
***
---
audienceTitle:
Audience Mapping Lesson
---
audience:
### Knowing your audience
- Read through this information on [audience mapping](https://docs.google.com/document/d/1_IqVXa8yy-Qg9Xk4DOQ18TtaaeNSq40aVviyeXBKsUw/)
- Make a copy of this [template](https://docs.google.com/document/d/1laIdjjdcdav7m1CDrZJEX3sHJiKd9IVQX0kBN6HRn7I/edit#) and fill it out yourself
***
---
oaTitle:
Open Access Week Lesson
---
oa:
### Blogging for Open Access Week 2020
- [Open Access Week 2020](http://www.openaccessweek.org) has the theme of 'Open with Purpose: Taking Action to Build Structural Equity and Inclusion'
- We will collaboratively write a blog reflecting on the theme of 'Open with Purpose: Taking Action to Build Structural Equity and Inclusion'
- Each Fellow writes a paragraph
- By Friday (Oct 23), add your paragraph to the Open Access Week Blog by a PR.
- GitHub instructions (Lilly will help you with this):
  - The repository is here [https://github.com/frictionlessdata/fellows](https://github.com/frictionlessdata/fellows)
  - The blog content can be found within the following folder: fellows -> content -> blog -> oa-week-2020 -> contents.lr
  - Step 1, Pull down the master branch. Since you will all be editing the same blog file, you will need to pull any changes onto your local machine. Do this before you make your edits. Type 'git pull origin master'
  - Step 2, Create a new branch: in the terminal, write 'git checkout -b [your-branch-name]' (replace with your name & remove the brackets)
  - *make sure you don't edit the master branch* You can check with 'git status'
  - Step 3, Add your paragraph to the blog: You will be editing the 'contents.lr' file within the oa-week-2020 folder
  - Step 4, Add and commit your changes: Once you finish editing the file, in your terminal, type: 
    - git status
      - make sure everything looks OK
    - git add content/blog/oa-week-2020/contents.lr
    - git commit -m "adds [your name]'s blog"
  - Step 5, Push your changes to your branch and open a Pull Request
    - git push origin [your-branch-name]
    - in GitHub, open a pull request (PR) + tag @lwinfree for review
    - Lilly will merge your PR
  - **ask Lilly if you need help!**
